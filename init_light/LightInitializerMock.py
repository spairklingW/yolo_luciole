# To make python 2 and python 3 compatible code
from __future__ import absolute_import
from Light import *
from CameraStreamMock import *
from ILightInitializer import *


# create class interface
class LightInitializerMock(ILightInitializer):

    def __init__(self):
        self.lights = []
        self.frame_mock = self.__get_frame()
        self.prev_frame = None
        self.diff = None
        self.frame_light_transition_candidate = None
        self.background_frame = None
        self.output_video_path = None
        self.image_processor = ImageProcessor()
        self.max_sum_candidate = 0
        self.__get_frame_dimensions()

    @staticmethod
    def __get_frame():
        camera_stream = CameraStreamMock()
        return camera_stream.get_frame()

    def __get_frame_dimensions(self):
        self.H, self.W = self.frame_mock.shape[:2]

    def detect_lights(self):
        print("detect the lights")

        # detect which raspi pins are in used || set up a random number of lights
        # in the detector
        light_number = 1
        for i in range(0, light_number):
            self.lights.append(Light(i))

    def set_light_on(self, light):
        # set the light on, placeholder only for mock as the light is generated by a circle
        pass

    # to be implemented for raspi !
    def set_light_off(self, light):
        # set the light on, placeholder only for mock as the light is generated by a circle
        pass

    def __exit__(self, exception_type, exception_value, traceback):
        print("quite yolo detector")