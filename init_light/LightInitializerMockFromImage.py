# To make python 2 and python 3 compatible code
from __future__ import absolute_import
import os
import sys
from pathlib import Path
sys.path.append(str(Path(os.path.dirname(os.path.abspath(__file__))).parent))
from ambiancing.Light import *
from CameraStreamMock import *
from ILightInitializer import *


# create class interface
class LightInitializerMockFromImage(ILightInitializer):

    def __init__(self, in_image_path, out_video_path, config, verbose):
        self.config = config
        self.lights = []
        self.frame_mock = self.__get_frame()
        self.prev_frame = None
        self.diff = None
        self.frame_light_transition_candidate = None
        self.background_frame = None
        #self.output_video_path = r'C:\Users\brene\source\repos\github\yolo_luciole\init_light\video\out_video.avi' #write function for that
        self.in_image_path = in_image_path
        self.output_video_path = out_video_path
        self.image_processor = ImageProcessor(self.config)
        self.max_sum_candidate = 0
        self.__get_frame_dimensions()
        self.mock = True
        self.verbose = verbose

    @staticmethod
    def __get_frame():
        camera_stream = CameraStreamMock()
        return camera_stream.get_frame()

    def __get_frame_dimensions(self):
        self.H, self.W = self.frame_mock.shape[:2]

    def detect_lights(self):
        print("detect the lights from the mock")

        # detect which raspi pins are in used || set up a random number of lights
        # in the detector
        light_number = 1
        for i in range(0, light_number):
            self.lights.append(Light(i, 0, 0, "no_ip", "light_mock")) #change it to mock

    def process_images_impl_from_usecase(self, light = None):

        cnt = 0
        self.max_sum_candidate = 0
        elapsed_time = 0
        setup_time = self.config.get_setup_time()  # second
        time_start_light_on = self.config.get_time_start_light_on()
        time_start_light_off = self.config.get_time_start_light_off()

        count = 0
        path = self.in_image_path
        frame = cv2.imread(path)

        while elapsed_time < setup_time:

            time_start = time.time()
            print("cnt is:")
            print(cnt)

            if time_start_light_on < elapsed_time < time_start_light_off:

                if count is 0:
                    cv2.circle(frame, (int(random.uniform(0.2, 1.8)*self.H / 2), int(random.uniform(0.2, 1.8)*self.W / 2)), 7, (255, 255, 255), -1)
                    print("in the cercle")
                    # show the image
                    cv2.imshow("Image circle", frame)
                    cv2.waitKey(0)
                    count = count + 1

            if elapsed_time > time_start_light_off:
                print("should turn off light")

            cnt = self._process_images_impl_general(frame, cnt)
            elapsed_time = elapsed_time + time.time() - time_start

    def set_light_on(self, light):
        # set the light on, placeholder only for mock as the light is generated by a circle
        #must be a mock set it to pass again
        light.shut_on()
        #pass

    # to be implemented for raspi !
    def set_light_off(self, light):
        # set the light on, placeholder only for mock as the light is generated by a circle
        pass

    def __exit__(self, exception_type, exception_value, traceback):
        print("quite yolo detector")