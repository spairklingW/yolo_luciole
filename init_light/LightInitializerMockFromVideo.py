# To make python 2 and python 3 compatible code
from __future__ import absolute_import
import os
import sys
from pathlib import Path
sys.path.append(str(Path(os.path.dirname(os.path.abspath(__file__))).parent))
from ambiancing.Light import *
from CameraStreamMock import *
from ILightInitializer import *


# create class interface
class LightInitializerMockFromVideo(ILightInitializer):

    def __init__(self, in_video, out_video, config, verbose):
        self.config = config
        self.lights = []
        self.frame_mock = self.__get_frame()
        self.prev_frame = None
        self.diff = None
        self.frame_light_transition_candidate = None
        self.background_frame = None
        #self.output_video_path = r'C:\Users\brene\source\repos\github\yolo_luciole\init_light\video\out_video.avi' #write function for that
        self.output_video_path = out_video
        self.video_in = in_video
        self.image_processor = ImageProcessor(self.config)
        self.max_sum_candidate = 0
        self.__get_frame_dimensions()
        self.mock = True
        self.verbose = verbose

    @staticmethod
    def __get_frame():
        camera_stream = CameraStreamMock()
        return camera_stream.get_frame()

    def process_images_impl_from_usecase(self, light = None):
        cnt = 0
        self.max_sum_candidate = 0
        input_stream_path = self.video_in
        still_frames = True

        video_stream = VideoStream(input_stream_path)
        video_stream.get_size()
        video_stream.start()

        while still_frames:

            print("count is:")
            print(cnt)
            # TODO : change this part, if not set the run crashes as the video finishes processing before the end of the programn.
            # best would be to put all frames in the queue, but that would require a lot of computation, or detect when no image is in the buffer anymore
            if cnt is 50:
                break

            # check if a frame is available, if not stop programm as this means that the video is finished
            try:
                frame = video_stream.read()
            except:
                print("no (more?) frames available")
                break

            # cv2.imshow("Image from video stream", frame)
            # cv2.waitKey(0)

            cnt = self._process_images_impl_general(frame, cnt)

    def __get_frame_dimensions(self):
        self.H, self.W = self.frame_mock.shape[:2]

    def detect_lights(self):
        print("detect the lights from the mock")

        # detect which raspi pins are in used || set up a random number of lights
        # in the detector
        light_number = 1
        for i in range(0, light_number):
            self.lights.append(Light(i, 0, 0, "no_ip", "light_mock"))  # change it to mock

    def set_light_on(self, light):
        # set the light on, placeholder only for mock as the light is generated by a circle
        #must be a mock set it to pass again
        light.shut_on()
        #pass

    # to be implemented for raspi !
    def set_light_off(self, light):
        # set the light on, placeholder only for mock as the light is generated by a circle
        pass

    def __exit__(self, exception_type, exception_value, traceback):
        print("quite yolo detector")